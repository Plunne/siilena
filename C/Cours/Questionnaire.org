#+TITLE: QUESTIONNAIRE
#+AUTHOR: Lena SAVY-LARIGALDIE

Formateur : Paul ERNEST

* TABLE OF CONTENT :toc:
- [[#partie-1][Partie 1]]
- [[#partie-2][Partie 2]]
- [[#partie-3][Partie 3]]
- [[#partie-4][Partie 4]]

* Partie 1

1. Donnez 3 raisons d'apprendre le C :
   #+begin_src
   Langage bas niveau, souple, puissant, tres rependu dans le hardware, syntaxe legere
   #+end_src

2. Role du compilateur :
   #+begin_src
   Convertir le langage C (interpretable) en langage machine (objet)
   #+end_src

3. Que faut-il faire en cas d'erreurs ? :
   #+begin_src
   Lire les erreurs sinon relire le code pour trouver les erreurs
   #+end_src

4. Qu'est ce que le langage machine? :
   #+begin_src
   Langage binaire representant le signal electrique (Etat haut/Etat bas)
   #+end_src

5. Que fait l'editeur de liens ? :
   #+begin_src
   Cherche les fichiers objets contenant les fonctions externes utlisees dans le programme
   #+end_src

* Partie 2

1. Comment appelle-t-on un groupe d'une ou plusieurs instructions entre accolades?
   #+begin_src
   Bloc de code
   #+end_src

2. Quel element obligatoire d'un programme en C?
   #+begin_src
   Fonction main()
   #+end_src

3. Pour quelles raisons commenter?
   #+begin_src
   Se retrouver, revenir sur un programme plus tard, comprendre le code pour soi et pour les autres.
   #+end_src

4. Qu'est-ce qu'une fonction?
   #+begin_src
   Portion de code independante (sous-programme).
   #+end_src

5. Quels sont les deux types de fonctions disponibles en langage C et quelles sont leurs difference?
   #+begin_src
   Fonctions internes (Fonctions de l'utilisateur) et externes (Fonctions de bibliotheque).
   #+end_src

6. A quoi sert l'appel #include ?
   #+begin_src
   Importer une bibliotheque qui permettent d'avoir acces a des declarations externes.
   #+end_src

7. Qu'est-ce au'un fichier inclus?
   #+begin_src
   Une bibliotheque (La ou on declare des fonctions ou variables).
   #+end_src

8. Quelle est la difference entre une instruction et un bloc de code?
   #+begin_src
   Un bloc de code contient des instructions.
   #+end_src

* Partie 3

_Exercice:_

Quelles sont les lignes avec :

- Instructions? =5=, =6=, =7=, =8=, =13=, =14=, =15=
- Definition de variable? =13=
- Declaration de fonction? =1 (indirectement)=, =2=
- Commentaires? =10=
- Definition de fonction? =3 -> 9= et =11 -> 16=

* Partie 4

1. Quelle est a difference avec une variable entiere et une variable a virgule flottante?
Une variable flottante a une virgule alors qu'une valeur entiere ne peux pas avoir de virgule.

2. Donner deux raisons d'utiliser une variable a virgule flottante double precision plutot que le meme variable simple precision?
La double sera plus precise, les valeurs pourront etre plus grandes avant et apres la virgule.

3. Quels sont les deux avantages a utiliser une constante symbolique plutot qu'une constante litterale?
La place en memoire (pas de variable declaree) et l'interpretation (3.14 dans un int -> 3; 3.14 dans un float -> 3.14) 

4. Trouver deux methodes pour definir une constante appelee MAXIMUM qui aurait une valeur de 100.
#+begin_src c
#define MAXIMUM 100
const char MAXIMUM = 100;
#+end_src

5. Quels sont les characters autorises dans le nom d'une variable en C?
- Lettres et Chiffres uniquement
- Commence par une lettre minuscule
- Sensible a la casse (Majuscule != Minuscule)
- Pas de mot cle

6.
