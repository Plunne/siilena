#+TITLE: QUESTIONNAIRE
#+AUTHOR: Lena SAVY-LARIGALDIE

Formateur : Paul ERNEST

* TABLE OF CONTENT :toc:
- [[#partie-1][Partie 1]]
- [[#partie-2][Partie 2]]
- [[#partie-3][Partie 3]]
- [[#partie-4][Partie 4]]

* Partie 1

1. Donnez 3 raisons d'apprendre le C :
   #+begin_example
   Langage bas niveau, souple, puissant, tres rependu dans le hardware, syntaxe legere
   #+end_example

2. Role du compilateur :
   #+begin_example
   Convertir le langage C (interpretable) en langage machine (objet)
   #+end_example

3. Que faut-il faire en cas d'erreurs ? :
   #+begin_example
   Lire les erreurs sinon relire le code pour trouver les erreurs
   #+end_example

4. Qu'est ce que le langage machine? :
   #+begin_example
   Langage binaire representant le signal electrique (Etat haut/Etat bas)
   #+end_example

5. Que fait l'editeur de liens ? :
   #+begin_example
   Cherche les fichiers objets contenant les fonctions externes utlisees dans le programme
   #+end_example

* Partie 2

1. Comment appelle-t-on un groupe d'une ou plusieurs instructions entre accolades?
   #+begin_example
   Bloc de code
   #+end_example

2. Quel element obligatoire d'un programme en C?
   #+begin_example
   Fonction main()
   #+end_example

3. Pour quelles raisons commenter?
   #+begin_example
   Se retrouver, revenir sur un programme plus tard, comprendre le code pour soi et pour les autres.
   #+end_example

4. Qu'est-ce qu'une fonction?
   #+begin_example
   Portion de code independante (sous-programme).
   #+end_example

5. Quels sont les deux types de fonctions disponibles en langage C et quelles sont leurs difference?
   #+begin_example
   Fonctions internes (Fonctions de l'utilisateur) et externes (Fonctions de bibliotheque).
   #+end_example

6. A quoi sert l'appel #include ?
   #+begin_example
   Importer une bibliotheque qui permettent d'avoir acces a des declarations externes.
   #+end_example

7. Qu'est-ce au'un fichier inclus?
   #+begin_example
   Une bibliotheque (La ou on declare des fonctions ou variables).
   #+end_example

8. Quelle est la difference entre une instruction et un bloc de code?
   #+begin_example
   Un bloc de code contient des instructions.
   #+end_example

* Partie 3

_Exercice:_

Quelles sont les lignes avec :

- Instructions? =5=, =6=, =7=, =8=, =13=, =14=, =15=
- Definition de variable? =13=
- Declaration de fonction? =1 (indirectement)=, =2=
- Commentaires? =10=
- Definition de fonction? =3 -> 9= et =11 -> 16=

* Partie 4

1. Quelle est a difference avec une variable entiere et une variable a virgule flottante?
   #+begin_example
   Une variable flottante a une virgule alors qu'une valeur entiere ne peux pas avoir de virgule.
   #+end_example

2. Donner deux raisons d'utiliser une variable a virgule flottante double precision plutot que le meme variable simple precision?
   #+begin_example
   La double sera plus precise, les valeurs pourront etre plus grandes avant et apres la virgule.
   #+end_example

3. Quels sont les deux avantages a utiliser une constante symbolique plutot qu'une constante litterale?  
   #+begin_example
   La place en memoire (pas de variable declaree) et l'interpretation (3.14 dans un int -> 3; 3.14 dans un float -> 3.14) 
   #+end_example

4. Trouver deux methodes pour definir une constante appelee MAXIMUM qui aurait une valeur de 100.   
   #+begin_src c
   #define MAXIMUM 100
   const char MAXIMUM = 100;
   #+end_src

5. Quels sont les characteres autorises dans le nom d'une variable en C?
     
 - Lettres et Chiffres uniquement
 - Commence par une lettre minuscule
 - Sensible a la casse (Majuscule != Minuscule)
 - Pas de mot cle

6. A Venir...


* PARTIE ?

1. Comment fonctionne la programmation structuree et pourquoi ?
   #+begin_example
   Avec les fonctions, cela permet de reutiliser du code definit qu'a un seul endroit pour eviter la repetition de code.
   #+end_example

2. Quelle est la premiere ligne de la definition de fonction et quelles informations contient-elle ?
   #+begin_example
   L'en-tete : prototype sans point virgule.
   #+end_example

3. Combien de valeurs peut retourner une fonction.
   #+begin_example
   0 ou 1 seule.
   #+end_example

4. Si une fonction pas de valeur, quel type doit elle avoir dans la declaration.
   #+begin_example
   void
   #+end_example

5. Quelle est la difference entre la definition et le prototype d'une fonction?
   #+begin_example
   La definition est la ou l'on definit le corps de la fonction et le prototype la ou on declare la fonction.   
   #+end_example

6. Quelle est la particularite des variables locales.
   #+begin_example
   D'etre locale.   
   #+end_example

* PARTIE ?

1.
   #+begin_src c
   float fais_le(char val1, char val2, char val3);
   #+end_src

2.
   #+begin_src c
   void affiche_un_nombre(int n);
   #+end_src

3.
   a) ~int~
   b) ~long~

* PARTIE ?

1.
   #+begin_src c
   int produit(int a, int b) {
      return a * b;
   }
   #+end_src

2.
   #+begin_src c
   int division(int a, int b) {
      return (b != 0) ? a/b : 0;
   }
   #+end_src

3.
   #+begin_src c
   int moyenne(int a, int b) {
      return (a + b) / 2;
   }
   #+end_src

4.
   #+begin_src c
   float recurrence(int n) {
      return (n == 0) 1 : 3 * recurrence(--n);
   }
   #+end_src
