#+TITLE: QUESTIONNAIRE
#+AUTHOR: Lena SAVY-LARIGALDIE

Formateur : Paul ERNEST

* TABLE OF CONTENT :toc:
- [[#partie-1][PARTIE 1]]
- [[#partie-2][PARTIE 2]]
- [[#partie-3][PARTIE 3]]
- [[#partie-4][PARTIE 4]]
- [[#partie-5][PARTIE 5]]
- [[#partie-6][PARTIE 6]]
- [[#partie-7][PARTIE 7]]

* PARTIE 1

1. Donnez 3 raisons d'apprendre le C :
   #+begin_example
   Langage bas niveau, souple, puissant, tres rependu dans le hardware, syntaxe legere
   #+end_example

2. Role du compilateur :
   #+begin_example
   Convertir le langage C (interpretable) en langage machine (objet)
   #+end_example

3. Que faut-il faire en cas d'erreurs ? :
   #+begin_example
   Lire les erreurs sinon relire le code pour trouver les erreurs
   #+end_example

4. Qu'est ce que le langage machine? :
   #+begin_example
   Langage binaire representant le signal electrique (Etat haut/Etat bas)
   #+end_example

5. Que fait l'editeur de liens ? :
   #+begin_example
   Cherche les fichiers objets contenant les fonctions externes utlisees dans le programme
   #+end_example

* PARTIE 2

1. Comment appelle-t-on un groupe d'une ou plusieurs instructions entre accolades?
   #+begin_example
   Bloc de code
   #+end_example

2. Quel element obligatoire d'un programme en C?
   #+begin_example
   Fonction main()
   #+end_example

3. Pour quelles raisons commenter?
   #+begin_example
   Se retrouver, revenir sur un programme plus tard, comprendre le code pour soi et pour les autres.
   #+end_example

4. Qu'est-ce qu'une fonction?
   #+begin_example
   Portion de code independante (sous-programme).
   #+end_example

5. Quels sont les deux types de fonctions disponibles en langage C et quelles sont leurs difference?
   #+begin_example
   Fonctions internes (Fonctions de l'utilisateur) et externes (Fonctions de bibliotheque).
   #+end_example

6. A quoi sert l'appel #include ?
   #+begin_example
   Importer une bibliotheque qui permettent d'avoir acces a des declarations externes.
   #+end_example

7. Qu'est-ce au'un fichier inclus?
   #+begin_example
   Une bibliotheque (La ou on declare des fonctions ou variables).
   #+end_example

8. Quelle est la difference entre une instruction et un bloc de code?
   #+begin_example
   Un bloc de code contient des instructions.
   #+end_example

* PARTIE 3

_Exercice:_

Quelles sont les lignes avec :

- Instructions? =5=, =6=, =7=, =8=, =13=, =14=, =15=
- Definition de variable? =13=
- Declaration de fonction? =1 (indirectement)=, =2=
- Commentaires? =10=
- Definition de fonction? =3 -> 9= et =11 -> 16=

* PARTIE 4

1. Quelle est a difference avec une variable entiere et une variable a virgule flottante?
   #+begin_example
   Une variable flottante a une virgule alors qu'une valeur entiere ne peux pas avoir de virgule.
   #+end_example

2. Donner deux raisons d'utiliser une variable a virgule flottante double precision plutot que le meme variable simple precision?
   #+begin_example
   La double sera plus precise, les valeurs pourront etre plus grandes avant et apres la virgule.
   #+end_example

3. Quels sont les deux avantages a utiliser une constante symbolique plutot qu'une constante litterale?  
   #+begin_example
   La place en memoire (pas de variable declaree) et l'interpretation (3.14 dans un int -> 3; 3.14 dans un float -> 3.14) 
   #+end_example

4. Trouver deux methodes pour definir une constante appelee MAXIMUM qui aurait une valeur de 100.   
   #+begin_src c
   #define MAXIMUM 100
   const char MAXIMUM = 100;
   #+end_src

5. Quels sont les characteres autorises dans le nom d'une variable en C?
     
 - Lettres et Chiffres uniquement
 - Commence par une lettre minuscule
 - Sensible a la casse (Majuscule != Minuscule)
 - Pas de mot cle

6. Quelles sont les regles a suivre pour creer des noms de variables et de constantes litterales?

 - Lettres et Chiffres uniquement
 - Commence par une lettre minuscule
 - Sensible a la casse (Majuscule != Minuscule)
 - Pas de mot cle

7. Quelle difference y a-t-il entre une constante symbolique et une constante litterale?
   #+begin_example
   L'interpretation de la valeur, la litterale a un type force alors que la symbolique est flexible.
   #+end_example

8. Quelle valeur minimum peut prendre une variable de type short ?
   #+begin_example
   -32 768 (ou 0 en unsigned).
   #+end_example

* PARTIE 5

1. Que fait l'instruction suivante? ~x =5 + 8;~
   #+begin_example
   Elle affecte 13 (5 + 8) a une variable nommee x.
   #+end_example

2. Qu'est ce qu'une expression?
   #+begin_example
   Il s'agit generalement d'une condition ou de la verification d'une valeur nulle ou existante.
   #+end_example

3. Qu'est ce qui determine l'ordre de realisation des operations dans une expression qui contient plusieurs operateurs?
   #+begin_example
   La priorite des operateurs.
   #+end_example

4. Si une variable ~x~ a pour valeur ~10~,
   quelles sont les valeurs stockees dans ~x~ et ~a~ apres l'execution de chacune de ces instructions (separement) ? ~a = x++;~ ~a = ++x~
   #+begin_example
   10 puis 12
   #+end_example

5. Quelle est la valeur de l'expression ~10 % 3~ ?
   #+begin_example
   1
   #+end_example

6. Quelle est la valeur de l'expression ~5 + 3 * 8 / 2 + 2~ ?
   #+begin_example
   19
   #+end_example

7. Ecrivez l'expression de la question 6 avec des parentheses pour obtenir le resultat ~16~ .
   #+begin_example
   5 + (((3 * 8) / (2 + 2)))
   #+end_example

8. Quelle valeur prend une expression fausse?
   #+begin_example
   0
   #+end_example

* PARTIE 6

1. Comment fonctionne la programmation structuree et pourquoi ?
   #+begin_example
   Avec les fonctions, cela permet de reutiliser du code definit qu'a un seul endroit pour eviter la repetition de code.
   #+end_example

2. Quelle est la premiere ligne de la definition de fonction et quelles informations contient-elle ?
   #+begin_example
   L'en-tete : prototype sans point virgule.
   #+end_example

3. Combien de valeurs peut retourner une fonction?
   #+begin_example
   0 pour une void ou 1 seule pour les autres.
   #+end_example

4. Si une fonction ne retourne pas de valeur, quel type doit elle avoir dans la declaration?
   #+begin_example
   void
   #+end_example

5. Quelle est la difference entre la definition et le prototype d'une fonction?
   #+begin_example
   La definition est la ou l'on definit le corps de la fonction et le prototype la ou on declare la fonction.   
   #+end_example

6. Quelle est la particularite des variables locales?
   #+begin_example
   D'etre locale.   
   #+end_example

* PARTIE 6

1. Ecrivez l'en-tete de la fonction ~fais_le()~ qui a ~3 arguments~ de type ~char~ et qui revoie une valeur de type ~float~ au programme.
   #+begin_src c
   float fais_le(char val1, char val2, char val3);
   #+end_src

2. Ecrivez l'en-tete de la fonction ~affiche_un_nombre()~ qui a ~1 seul argument~ de type ~int~ et qui ne revoie ~rien~ .
   #+begin_src c
   void affiche_un_nombre(int n);
   #+end_src

3. Quel type de valeur revoient les fonctions suivantes?
   a) ~int~
   b) ~long~

* PARTIE 7

1. Ecrivez une fonction qui recoit deux nombres en arguments et qui renvoie la valeur correspondant au produit de ces deux nombres.
   #+begin_src c
   int produit(int a, int b) {
      return a * b;
   }
   #+end_src

2. Ecrivez une fonction qui recoit deux nombres en arguments et qui divise le premier par le second si celui-ci est different de 0.
   #+begin_src c
   int division(int a, int b) {
      return (b != 0) ? a/b : 0;
   }
   #+end_src

3. Ecrivez une fonction qui permet de calculer la moyenne de 2 valeurs de type float, donnees par l'utilisateur.
   #+begin_src c
   float moyenne(float a, float b) {
      return (a + b) / 2;
   }
   #+end_src

4. Ecrivez une fonction recurrente qui calcule le resultat de la valeur 3 a la puissance du nombre choisit par l'utilisateur.
   Par exemple, si le nombre 4 est tape par l'utilisateur, le resultat sera 81.
   #+begin_src c
   float recurrence(int n) {
      return (n == 0) ? 1 : 3 * recurrence(--n);
   }
   #+end_src

* PARTIE 8

1. Ecrivez la declaration correspondant a un tableau qui contiendra 50 valeurs de type long.
   #+begin_src c
   long tableau[50];
   #+end_src

2. Quelle est la valeur de x apres l'execution de l'instruction suivante? ~for (x=0; x < 100; x++);~
   #+begin_src
   100
   #+end_src

3. Quelle est la valeur de ctr apres l'execution de l'instruction suivante? ~for (ctr=0; ctr < 10; ctr+=3);~
   #+begin_src
   12
   #+end_src

4. Combien de caracteres X la boucle for suivante affiche-t-elle?
   #+begin_src c
   for (x=0; x < 10; x++)
       for (y=5; y > 0; y--)
          puts("X");
   #+end_src
   
   #+begin_src
   1ere boucle 10
   2eme boucle 5
   10 * 5 = 50
   #+end_src

5. Comptez de 1 a 100 de 3 en 3 avec une boucle for, une boucle while, et une boucle do while.
   
   Avec for :
   #+begin_src c
   for (int ctr=1; ctr <= 100; ctr += 3);
   #+end_src
   
   Avec while :
   #+begin_src c
   int ctr = 1;
   while (ctr <= 100) {
      ctr += 3;
   }
   #+end_src

   Avec do while :
   #+begin_src c
   int ctr = 1;
   do
   {
      ctr += 3;
   }
   while (ctr <= 100)
   #+end_src

* PARTIE 9

1. Quel operateur faut-il utiliser pour obtenir l'adresse d'une variable?
   #+begin_example
   &
   #+end_example

2. Quel operateur faut-il utiliser pour obtenir la valeur de la variable pointee?
   #+begin_example
   *
   #+end_example

3. Qu'est ce qu'un pointeur?
   #+begin_example
   Variable contenant l'adresse d'une autre variable d'un type donne.
   #+end_example

4. Qu'est ce qu'un acces indirect?
   #+begin_example
   Acceder a la valeur en passant par une variable pointeur.
   #+end_example

5. Commment les element d'un tableau sont-ils stockes en memoire?
   #+begin_example
   Sequetiellement/A la suite.
   #+end_example

6. Trouver deux methodes pour obtenir l'adresse du premier element du tableau data[].
   #+begin_example
   tableau[0]
   *tableau   
   #+end_example

7. Trouver deux methodes pour passer un tableau en argument d'une fonction.
   #+begin_src c
   type_fonction fonction(type_tableau * tableau, type_tableau taille_tableau); // Il faut absolument passer le nombre d'elements du tableau
   type_fonction fonction(type_tableau tableau[], type_tableau taille_tableau); // Il faut absolument passer le nombre d'elements du tableau
   #+end_src
