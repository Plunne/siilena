#+TITLE: COURS 1 - Les bases du langage C
#+AUTHOR: Lena SAVY-LARIGALDIE

Formateur : Paul ERNEST

* TABLE OF CONTENT :toc:
- [[#installation-des-outils][INSTALLATION DES OUTILS]]
  - [[#cmake][CMake]]
  - [[#visual-studio-community][Visual Studio Community]]
- [[#codages-numeriques][CODAGES NUMERIQUES]]
- [[#etapes-de-la-realisation-dun-programme][ETAPES DE LA REALISATION D'UN PROGRAMME]]
- [[#structure-dun-programme][STRUCTURE D'UN PROGRAMME]]
- [[#les-fonctions-en-3-etapes][LES FONCTIONS EN 3 ETAPES]]
  - [[#declaration][Declaration]]
  - [[#definition][Definition]]
  - [[#appel][Appel]]
- [[#cl-equivalent-de-make-sur-windows][CL (equivalent de make sur windows)]]
  - [[#compilation][Compilation]]
  - [[#execution][Execution]]
  - [[#recompiler][Recompiler]]
- [[#3-types-derreur][3 TYPES D'ERREUR]]
- [[#pourquoi-le-langage-c-][POURQUOI LE LANGAGE C ?]]
- [[#variables-et-premieres-instructions][VARIABLES ET PREMIERES INSTRUCTIONS]]
  - [[#ram-random-acces-memory][RAM (Random Acces Memory)]]
  - [[#les-tailles-en-binaire][Les tailles en binaire]]
  - [[#variable][Variable]]
  - [[#regles-de-nommage][Regles de nommage]]
  - [[#syntaxe][Syntaxe]]
  - [[#bases-numeriques][Bases numeriques]]
  - [[#constantes][Constantes]]
  - [[#valeurs-negative][Valeurs negative]]
  - [[#flottant][Flottant]]
- [[#operateurs][OPERATEURS]]
  - [[#operateurs-arithmetiques][Operateurs arithmetiques]]
- [[#lexique][LEXIQUE]]

* INSTALLATION DES OUTILS

** CMake

Metalanguage

Permet de generer une chaine de compilation.

- Installer CMake (cmake.org)
- Lors de l'installation, ajouter la variable d'environnement (System PATH)

** Visual Studio Community

IDE

- Installer Visual Studio Community
- Lors de l'installation, cocher la suite Developpement C/C++.
- Ajouter =cl= aux variables d'environement.

* CODAGES NUMERIQUES

* ETAPES DE LA REALISATION D'UN PROGRAMME 

=(1) DEVELOPPEMENT= -> =(2) COMPILATION= -> =(3) LINKAGE= -> =(4) EXECUTION=

*** Developpement

Developpement du programme en code interpretable par l'humain.

*** Compilation

Convertir le code interpretable (ASM, C, C++, etc.) en un code machine (binaire, fichiers objet ".o").

*** Linkage

Cherche les fichiers objets contenant les fonctions externes utlisees dans le programme.

*** Execution

Application executable.

* STRUCTURE D'UN PROGRAMME

*** Inclusions

Importation de fichiers d'en-tete. Ces fichiers contiennent des declarations de fonctions et variables externes.

*** Declaration de fonction 

Prototype de fonction.

*** La fonction main()

Entree du programme.

- Il y en a obligatoirement 1!
- Il faut une accolade ouvrant et une fermante.

*** Accolades, blocs d'instructions

Les instructions se codent dans des accolades.

*** Declaration de variable

Allocation memoire pour stocker une valeur et attribution de son alias.

*** Definition de fonction

Portion de code independante (sous-programme).

*** Commentaires

Code non interprete a la compilation aidant a la comprehension d'un programme.

* LES FONCTIONS EN 3 ETAPES

=(1) Declaration= -> =(2) Definition= -> =(3) Appel=

** Declaration

Creation du prototype qui determine :

- Le Nom
- Le Type de sa valeur de retour
- Les parametres qu'elle prendra

** Definition

Implementation du code de la fonction.

** Appel

Utilisation de la fonction.

* CL (equivalent de make sur windows)

** Compilation

Creer un fichier objet de =HelloWorld.c= en =HelloWorld.obj= .
Cree aussi un executable =HelloWorld.exe= .

#+begin_src
cl HelloWorld.c
#+end_src

** Execution

Executer l'application =HelloWorld.exe= .

#+begin_src
HelloWorld.exe
#+end_src

** Recompiler

*IMPORTANT!* Il est important de recompiler le code apres chaque modification afin de verifier le bon fonctionnement.

* 3 TYPES D'ERREUR

- Erreur de code
- Erreur de compilation
- Erreur de linkage

* POURQUOI LE LANGAGE C ?

- Voir diapo

* VARIABLES ET PREMIERES INSTRUCTIONS

** RAM (Random Acces Memory)

Partie de la memoire de l'ordinateur ou l'on peut stocker des informations temporaires (variables par exemple).
Decompose en adresses.

** Les tailles en binaire

Voir Memo 2 - Les Types en C.

** Variable

Une variable est un emplacement memoire reserve pour stocker une valeur.

** Regles de nommage

- Lettres et Chiffres uniquement
- Commence par une lettre minuscule
- Sensible a la casse (Majuscule != Minuscule)
- Pas de mot cle

** Syntaxe

#+begin_src c
type nom = valeur;
#+end_src

** Bases numeriques

Prefixes des bases numeriques lors de l'affectation d'une variable.

- Decimal (par defaut) : =0d=
- Hexadecimal : =0x=
- Binaire : =0b=
- Octal : =0=

** Constantes

*** Constantes symboliques

Evite de declarer une variable pour une valeur reutilisee qui ne changera pas a l'execution.

#+begin_src c
#define NOM valeur 
#+end_src

*** Constantes litterales

Empeche la modification.

- Pour la securite, s'assurer que personne puisse l'affecter.
- Par convention, pour ameliorer la comprehension du code.

#+begin_src c
const type nom = valeur;
#+end_src

/Une constante symbolique prendra moins de place dans la pile mais en prendra plus dans le fichier objet
 tandis qu'une constante litterale prendra plus de place dans la pile mais n'en prendra moins dans le fichier objet./ 

** Valeurs negative

Pour un char :

=0= -> =127= -> =-128= -> =-1=

** Flottant

- 1 bit - Signe : Positif ou Negatif
- 8 bits - Exposant : Valeur de l'exposant de la puissance 10 (emplacement de la virgule)
- 23 bits - Mantisse : Valeur a afficher

* OPERATEURS

** Operateurs arithmetiques

*** Classiques

- Addition : =+=
- Soustraction : =-=
- Multiplication : =*=
- Division : =/=
- Modulo : =%=

*** Incrementation/Decrementation
  
**** Incrementation :

=i++= -> instruction puis i+1

=++i= -> i+1 puis instruction

**** Decremenation :

=i--= -> instruction puis i-1

=--i= -> i-1 puis instruction 

**** Exemple :

#+begin_src c
int a, b;
a = b = 5;
printf("%d %d", --i, i--);
printf("%d %d", --i, i--);
printf("%d %d", --i, i--);
printf("%d %d", --i, i--);
printf("%d %d", --i, i--);
#+end_src

-> =5 4=

a=4, b=4

-> =4 3=

a=3, b=3

-> =3 2=

a=2, b=2

-> =2 1=

a=1, b=1

-> =1 0=

a=0, b=0

*** Hierarchie des operateurs

1. Incrementation, Decrementation
2. Produit, Division, Modulo
3. Addition, SOustraction

** Operateurs de comparaison

*** Inferieur/Superieur
- Inferieur : ~<~
- Superieur : ~>~
- Inferieur ou egal : ~<=~
- Superieur ou egal : ~>=~

*** Egalite/Difference

- Egalite : ~==~
- Difference : ~!=~

** Operateurs logiques
** Operateurs d'affectation

* LES INSTRUCTIONS

** IF, ELSE, ELSE IF

*** IF

*SI* expression *ALORS* instructions

#+begin_src c
if (expression)
{
    // instructions
}
#+end_src

*** ELSE

*SI* expression *ALORS* instructions
*SINON* instructions

#+begin_src c
if (expression)
{
    // instructions
}
else
{
    // instructions
}
#+end_src

*** ELSE IF

*SI* expression *ALORS* instructions
*SINON SI* expression *ALORS* instructions
*SINON* instructions

#+begin_src c
if (expression)
{
    // instructions
}
else if (expression)
{
    // instructions
}
else
{
    // instructions
}
#+end_src

* CMAKE

Cree un environement pour developper sur n'importe quel systeme d'exploitation.

** CMakeLists.txt

Fichier de configuration minimaliste.

#+begin_src
cmake_minimum_required(VERSION 3.14)

project(Projet_Langage_C)

set(CMAKE_C_STANDARD 11)

add_executable(HelloWorld HelloWorld.c)
#+end_src

Le code ci-dessus :
- Choisit la version de CMake
- Choisit le nom du projet
- Choisit le langage
- Choisit le nom de l'executable et le fichier source

** Dossier build

Creer un dossier =build= .

** Generer le projet

Voir Image.

** Ouvrir le projet dans Visual Studio

Les projets Visual Studio ont comme extension =.slm= .

Aller dans le dossier build et lancer avec Visual Studio le fichier =Projet_Langage_C.sln= .

* DEBUG & RELEASE

** Debug

Le mode Debug permet de debugguer l'executable. Pour cela, l'executable doit contenir les informations supplementaires necessaires au debug et donc l'executable est plus lourd.

** Release

A contrariot, le mode release ne permet pas de debugguer, en revanche ne contenant pas les informations de debug il est beaucoup leger.
C'est le mode que l'on utilise pour le deploiement final de notre executable car plus optimise.

* LEXIQUE

- API : Ensemble d'outils qui permettent de faire l'interface avec un service.
- IDE : Integrated Development Environnement (Environnement de Developpement Integre : Editeur de code avec Debogueur, Compilateur et plein d'outils, c'est notre environement de travail)
